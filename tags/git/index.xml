<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>git on qinry&#39;s blog</title>
    <link>https://qinry.top/tags/git/</link>
    <description>Recent content in git on qinry&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 20 Oct 2019 08:50:01 +0800</lastBuildDate>
    
	<atom:link href="https://qinry.top/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>git入门使用</title>
      <link>https://qinry.top/posts/2019-10-20-git-simple-usage/</link>
      <pubDate>Sun, 20 Oct 2019 08:50:01 +0800</pubDate>
      
      <guid>https://qinry.top/posts/2019-10-20-git-simple-usage/</guid>
      <description>Git的使用 配置Git 提供Git用户名和邮箱
$ git config --global user.name &amp;quot;username&amp;quot;$ git config --global user.email &amp;quot;usernaem@example.com&amp;quot;忽略文件 创建文件 .gitignore ，让Git忽略某目录中的所有文件(不跟踪这些文件)，使用它可以避免项目混乱
初始化仓库 $ git init仓库是程序中被Git主动跟踪的一组文件。Git用来管理仓库的文件都存储在隐藏的.git/中，你根本不需要与这个目录打交道，但千万不要删除这个目录，否则将丢弃项目的所有历史记录。
检查状态 $ git status在Git中，分支 是项目的一个版本。提交 是项目在特定时间点的快照。
文件添加到仓库 $ git add [&amp;lt;file&amp;gt; | &amp;lt;path&amp;gt;]只是让Git开始关注指定文件或目录中的文件。但未提交。
执行提交 $ git commit -m &amp;lt;message&amp;gt;标志-m 让Git将接下来的消息记录到项目的历史记录中
$ git commit -am &amp;lt;message&amp;gt;标志-am中 a 让Git将仓库中所有修改了的文件都加入到当前提交中，m同上是提交记录信息
保证最后的工作目录是干净的，否则很有可能忘记添加文件
查看提交历史 $ git log每次提交时，Git都会生成一个包含40字符的独一无二的引用ID。它记录提交是谁执行的、提交的时间以及提交时指定的消息。并非在任何情况下你都需要所有这些信息，因此 Git提供了一个选项，让你能够打印提交历史条目的更简单的版本：
$ git log --pretty=oneline将显示提交的引用ID及提交记录的信息
撤销修改 $ git checkout -- &amp;lt;file&amp;gt;命令git checkout 让你能够恢复到以前的任何提交。命令git checkout .</description>
    </item>
    
  </channel>
</rss>