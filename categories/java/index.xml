<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>java on 槎城小子</title>
    <link>https://qinry.github.io/categories/java/</link>
    <description>Recent content in java on 槎城小子</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>lixiaoqin490@gmail.com (槎城小子)</managingEditor>
    <webMaster>lixiaoqin490@gmail.com (槎城小子)</webMaster>
    <copyright>©2023, All Rights Reserved</copyright>
    <lastBuildDate>Mon, 24 Jan 2022 09:24:21 +0800</lastBuildDate>
    
        <atom:link href="https://qinry.github.io/categories/java/index.xml" rel="self" type="application/rss+xml" />
    

      
      <item>
        <title>快速上手 Rocket MQ</title>
        <link>https://qinry.github.io/posts/2022/01/quickstart-rocketmq/</link>
        <pubDate>Mon, 24 Jan 2022 09:24:21 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Mon, 24 Jan 2022 09:24:21 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2022/01/quickstart-rocketmq/</guid>
        <description>一、简介 Apache RocketMQ 是一个统一的消息引擎，轻量级的数据处理平台。 特点： 低延迟 以金融为导向，具有跟踪和审核功能的高可用性 行业可持续发展，万亿级消息容量</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
          
            
              <category>rocketmq</category>
            
          
            
              <category>mq</category>
            
          
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>Mybatis Generator 快速开始</title>
        <link>https://qinry.github.io/posts/2021/11/mybatis-generator-crash/</link>
        <pubDate>Fri, 12 Nov 2021 23:44:27 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Fri, 12 Nov 2021 23:44:27 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2021/11/mybatis-generator-crash/</guid>
        <description>创建Gradle项目 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 plugins { id &amp;#39;org.springframework.boot&amp;#39; version &amp;#39;2.5.6&amp;#39; id &amp;#34;com.thinkimi.gradle.MybatisGenerator&amp;#34; version &amp;#34;2.4&amp;#34; } apply plugin: &amp;#39;java&amp;#39; apply plugin: &amp;#39;io.spring.dependency-management&amp;#39; group &amp;#39;io.github.qinry&amp;#39; version &amp;#39;1.0-SNAPSHOT&amp;#39; sourceCompatibility = JavaVersion.VERSION_11 repositories { mavenCentral() } dependencies { implementation &amp;#39;org.mybatis.spring.boot:mybatis-spring-boot-starter:2.2.0&amp;#39; runtimeOnly &amp;#39;mysql:mysql-connector-java&amp;#39; testImplementation</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
          
            
              <category>mybatis</category>
            
          
            
              <category>orm</category>
            
          
            
              <category>gradle</category>
            
          
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>Mybatis-Spring-Boot-Starter 快速开始</title>
        <link>https://qinry.github.io/posts/2021/11/mybatis-spring-boot-starter-crash/</link>
        <pubDate>Thu, 11 Nov 2021 10:00:16 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Thu, 11 Nov 2021 10:00:16 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2021/11/mybatis-spring-boot-starter-crash/</guid>
        <description>创建Gradle项目 编写build.gradle 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 plugins { id &amp;#39;org.springframework.boot&amp;#39; version &amp;#39;2.5.6&amp;#39; apply false id &amp;#39;io.spring.dependency-management&amp;#39; version &amp;#39;1.0.11.RELEASE&amp;#39; id</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
          
            
              <category>mybatis</category>
            
          
            
              <category>spring</category>
            
          
            
              <category>gradle</category>
            
          
            
              <category>orm</category>
            
          
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>Mybatis-Spring 快速开始</title>
        <link>https://qinry.github.io/posts/2021/11/mybatis-spring-crash/</link>
        <pubDate>Wed, 10 Nov 2021 07:07:29 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Wed, 10 Nov 2021 07:07:29 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2021/11/mybatis-spring-crash/</guid>
        <description>创建Gradle项目 使用 IDEA 创建一个初始的Gradle项目 编写项目配置和项目构建脚本 1 rootProject.name = &amp;#39;mybatis-spring-sample&amp;#39; 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
          
            
              <category>mybatis</category>
            
          
            
              <category>spring</category>
            
          
            
              <category>gradle</category>
            
          
            
              <category>orm</category>
            
          
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>Mybatis 快速入门</title>
        <link>https://qinry.github.io/posts/2021/11/mybatis-crash/</link>
        <pubDate>Tue, 09 Nov 2021 09:46:00 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Tue, 09 Nov 2021 09:46:00 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2021/11/mybatis-crash/</guid>
        <description>为Mybatis创建Gradle项目 使用idea创建gradle项目 项目结构： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ├── build.gradle ├── gradle │ └── wrapper │</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
          
            
              <category>mybatis</category>
            
          
            
              <category>gradle</category>
            
          
            
              <category>orm</category>
            
          
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>快速开始 Java8 文件IO</title>
        <link>https://qinry.github.io/posts/2021/11/quickstart-java8-io/</link>
        <pubDate>Thu, 04 Nov 2021 21:37:57 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Thu, 04 Nov 2021 21:37:57 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2021/11/quickstart-java8-io/</guid>
        <description>Files和Paths快速使用 演示用的文本： 1 2 3 Hi, I&amp;#39;m qinry! I am learning java8. Files and Paths are new untilty classes for input/output. 创建demo.txt的符号链接demo.link 1 ln -s demo.txt demo.link</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
          
            
              <category>io</category>
            
          
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>快速开始Java8流式编程</title>
        <link>https://qinry.github.io/posts/2021/11/quickstart-java8-stream-programming/</link>
        <pubDate>Tue, 02 Nov 2021 11:01:21 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Tue, 02 Nov 2021 11:01:21 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2021/11/quickstart-java8-stream-programming/</guid>
        <description>流是什么 流（Streams）是与任何特定存储机制无关的元素序列——实际上，我们说流是 “没有存储 “的。 集合优化了对象的存储，而流（Stream</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>快速开始Java8函数式编程</title>
        <link>https://qinry.github.io/posts/2021/11/quickstart-java8-functional-programming/</link>
        <pubDate>Tue, 02 Nov 2021 06:12:46 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Tue, 02 Nov 2021 06:12:46 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2021/11/quickstart-java8-functional-programming/</guid>
        <description>Java 8 Lambda 表达式和方法引用 (Method References) 允许你以函数式编程。函数式编程抽象行为，通过合并现有代码来生成新功能而不是从头开始编写所有内容，我们可以更快地获得</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>NIO 网络编程</title>
        <link>https://qinry.github.io/posts/2021/10/nio-network/</link>
        <pubDate>Tue, 26 Oct 2021 17:16:15 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Tue, 26 Oct 2021 17:16:15 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2021/10/nio-network/</guid>
        <description>IO模型 有三个重要的IO模型： BIO 同步阻塞IO NIO 同步非阻塞IO AIO 异步IO 同步与异步。它们是相对于应用程序与系统内核交互讨论的。 同步是应用触发I</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
          
            
              <category>io</category>
            
          
        
        
          
            
              <category>网络编程</category>
            
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>JDBC的使用</title>
        <link>https://qinry.github.io/posts/2021/04/java-jdbc/</link>
        <pubDate>Fri, 02 Apr 2021 19:44:50 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Fri, 02 Apr 2021 19:44:50 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2021/04/java-jdbc/</guid>
        <description>什么是JDBC JDBC是执行SQL的java API，为关系型数据库提供访问。JDBC可以在更大平台使用像Windows、Mac、Unix等等</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
          
            
              <category>第三方类库</category>
            
          
            
              <category>mysql</category>
            
          
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>JSON解析</title>
        <link>https://qinry.github.io/posts/2021/02/java-json-parse/</link>
        <pubDate>Mon, 08 Feb 2021 12:47:14 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Mon, 08 Feb 2021 12:47:14 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2021/02/java-json-parse/</guid>
        <description>一、JSON概述 JSON(JavaScriptObject Notation, JS 对象简谱) 是一种轻量级的数据交换格式。它基于 ECMAScript (欧洲计算机协会制定的js规范)的一个子集，采用完全独立于编程语言的文本</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
          
            
              <category>第三方类库</category>
            
          
            
              <category>json</category>
            
          
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>多线程</title>
        <link>https://qinry.github.io/posts/2021/02/java-concurrent/</link>
        <pubDate>Fri, 05 Feb 2021 22:32:16 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Fri, 05 Feb 2021 22:32:16 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2021/02/java-concurrent/</guid>
        <description>一、概述 进程：是一个内存中运行的应用程序，每个进程都有一个独立空间 线程：是进程中的一个执行路径，共享一个内存空间，线程之间可以自由切换，并发</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
          
            
              <category>并发编程</category>
            
          
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>泛型</title>
        <link>https://qinry.github.io/posts/2021/01/java-generics/</link>
        <pubDate>Sun, 31 Jan 2021 17:09:15 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Sun, 31 Jan 2021 17:09:15 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2021/01/java-generics/</guid>
        <description>理解泛型 泛型是将类型参数化，类定义时一些成员变量和一些方法形式参数的类型成为变量，在使用时再传入一个具体类型，进一步抽象了变量的类型。好像是</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
          
            
              <category>泛型</category>
            
          
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>Java常用类库</title>
        <link>https://qinry.github.io/posts/2021/01/java-common-class-library/</link>
        <pubDate>Sun, 31 Jan 2021 17:08:58 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Sun, 31 Jan 2021 17:08:58 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2021/01/java-common-class-library/</guid>
        <description>一些常用类库的使用，没有列出完整代码，只有只有代码的主要部分 一、java.util.Objects java.lang.Objects是JDK</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
          
            
              <category>常用类库</category>
            
          
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>面向对象编程</title>
        <link>https://qinry.github.io/posts/2021/01/java-oriented-object/</link>
        <pubDate>Thu, 21 Jan 2021 14:27:16 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Thu, 21 Jan 2021 14:27:16 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2021/01/java-oriented-object/</guid>
        <description>一、类和对象 面向对象是相对于面向过程来讲的，指的是把 相关的数据和方法组织为一个整体来看待。面向过程关注的是执行的过程，面向对象关注的是具备功</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
          
            
              <category>面向对象编程</category>
            
          
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      
      <item>
        <title>Java 压缩文件的IO流</title>
        <link>https://qinry.github.io/posts/2020/04/java-zip/</link>
        <pubDate>Tue, 28 Apr 2020 14:50:00 +0800</pubDate>
        <author>lixiaoqin490@gmail.com (槎城小子)</author>
        <atom:modified>Tue, 28 Apr 2020 14:50:00 +0800</atom:modified>
        <guid>https://qinry.github.io/posts/2020/04/java-zip/</guid>
        <description>Java I/O库提供压缩功能输入、输出流，这些类是按字节方式处理，常用的压缩类有DeflaterOutputStream和它的子类ZipOutpu</description>
        
        <dc:creator>槎城小子</dc:creator>
        
        
        
        
          
            
              <category>jar</category>
            
          
            
              <category>zip</category>
            
          
            
              <category>io</category>
            
          
        
        
          
            
              <category>java</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>
